// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, renderList as _renderList, resolveComponent as _resolveComponent, toDisplayString as _toDisplayString, vModelCheckbox as _vModelCheckbox, vModelText as _vModelText, withDirectives as _withDirectives, withKeys as _withKeys } from 'vue'
// tslint:disable
/* eslint-disable */

export function appTemplateHtml(_ctx, _cache) {
  const _component_tab_container = _resolveComponent("tab-container")

  return (_openBlock(), _createBlock("div", null, [
    _createVNode("h4", null, "Log Tool"),
    _createVNode(_component_tab_container, {
      data: _ctx.data,
      onSwitching: _cache[1] || (_cache[1] = $event => (_ctx.switching($event)))
    }, null, 8 /* PROPS */, ["data"])
  ]))
}
export function othersTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { class: "panel" }, [
    _createVNode("button", {
      class: "btn btn-primary",
      onClick: _cache[1] || (_cache[1] = $event => (_ctx.resaveFailedLogs()))
    }, "resave failed logs")
  ]))
}
export const protocolProto = {
    "nested": {
        "RequestProtocol": {
            "fields": {
                "requestId": {
                    "type": "uint32",
                    "id": 1
                },
                "kind": {
                    "type": "string",
                    "id": 2
                },
                "searchLogs": {
                    "type": "SearchLogs",
                    "id": 3
                },
                "searchSamples": {
                    "type": "SearchSamples",
                    "id": 4
                }
            }
        },
        "SearchLogs": {
            "fields": {
                "content": {
                    "type": "string",
                    "id": 1
                },
                "time": {
                    "type": "string",
                    "id": 2
                },
                "hostname": {
                    "type": "string",
                    "id": 3
                },
                "from": {
                    "type": "uint32",
                    "id": 4
                },
                "size": {
                    "type": "uint32",
                    "id": 5
                }
            }
        },
        "SearchSamples": {
            "fields": {
                "from": {
                    "type": "string",
                    "id": 1
                },
                "to": {
                    "type": "string",
                    "id": 2
                }
            }
        },
        "ResponseProtocol": {
            "fields": {
                "kind": {
                    "type": "string",
                    "id": 1
                },
                "flows": {
                    "type": "Flows",
                    "id": 2
                },
                "historySamples": {
                    "rule": "repeated",
                    "type": "SampleFrame",
                    "id": 3
                },
                "searchLogsResult": {
                    "type": "SearchLogsResult",
                    "id": 4
                },
                "searchSamplesResult": {
                    "type": "SearchSamplesResult",
                    "id": 5
                },
                "resaveFailedLogsResult": {
                    "type": "ResaveFailedLogsResult",
                    "id": 6
                }
            }
        },
        "Flows": {
            "fields": {
                "serverTime": {
                    "type": "string",
                    "id": 1
                },
                "flows": {
                    "rule": "repeated",
                    "type": "Flow",
                    "id": 2
                }
            }
        },
        "SearchLogsResult": {
            "fields": {
                "requestId": {
                    "type": "uint32",
                    "id": 1
                },
                "kind": {
                    "type": "string",
                    "id": 2
                },
                "total": {
                    "type": "uint32",
                    "id": 3
                },
                "logs": {
                    "rule": "repeated",
                    "type": "Log",
                    "id": 4
                },
                "error": {
                    "type": "string",
                    "id": 5
                }
            }
        },
        "SearchSamplesResult": {
            "fields": {
                "requestId": {
                    "type": "uint32",
                    "id": 1
                },
                "kind": {
                    "type": "string",
                    "id": 2
                },
                "searchSampleResult": {
                    "rule": "repeated",
                    "type": "SampleFrame",
                    "id": 3
                },
                "error": {
                    "type": "string",
                    "id": 4
                }
            }
        },
        "ResaveFailedLogsResult": {
            "fields": {
                "requestId": {
                    "type": "uint32",
                    "id": 1
                },
                "kind": {
                    "type": "string",
                    "id": 2
                },
                "savedCount": {
                    "type": "uint32",
                    "id": 3
                },
                "totalCount": {
                    "type": "uint32",
                    "id": 4
                },
                "error": {
                    "type": "string",
                    "id": 5
                }
            }
        },
        "SampleFrame": {
            "fields": {
                "time": {
                    "type": "string",
                    "id": 1
                },
                "samples": {
                    "rule": "repeated",
                    "type": "Sample",
                    "id": 2
                }
            }
        },
        "FlowProtocol": {
            "fields": {
                "flows": {
                    "rule": "repeated",
                    "type": "Flow",
                    "id": 1
                }
            }
        },
        "Flow": {
            "fields": {
                "kind": {
                    "type": "string",
                    "id": 1
                },
                "log": {
                    "type": "Log",
                    "id": 2
                },
                "sample": {
                    "type": "Sample",
                    "id": 3
                }
            }
        },
        "Log": {
            "fields": {
                "time": {
                    "type": "string",
                    "id": 1
                },
                "content": {
                    "type": "string",
                    "id": 2
                },
                "filepath": {
                    "type": "string",
                    "id": 3
                },
                "hostname": {
                    "type": "string",
                    "id": 4
                }
            }
        },
        "Sample": {
            "fields": {
                "hostname": {
                    "type": "string",
                    "id": 1
                },
                "port": {
                    "type": "uint32",
                    "id": 2
                },
                "values": {
                    "keyType": "string",
                    "type": "uint32",
                    "id": 3
                }
            }
        }
    }
}
export function realtimeLogsTemplateHtml(_ctx, _cache) {
  const _component_relative_time = _resolveComponent("relative-time")

  return (_openBlock(), _createBlock("div", { class: "panel" }, [
    _createVNode("div", null, [
      _createVNode("button", {
        class: "btn btn-default btn-sm",
        onClick: _cache[1] || (_cache[1] = $event => (_ctx.clearLogsPush())),
        disabled: _ctx.logsPush.length === 0
      }, "clear", 8 /* PROPS */, ["disabled"]),
      _createVNode("label", null, [
        _withDirectives(_createVNode("input", {
          type: "checkbox",
          "onUpdate:modelValue": _cache[2] || (_cache[2] = $event => (_ctx.showRawLogPush = $event))
        }, null, 512 /* NEED_PATCH */), [
          [_vModelCheckbox, _ctx.showRawLogPush]
        ]),
        _createTextVNode(" show raw data ")
      ]),
      _createVNode("label", null, [
        _withDirectives(_createVNode("input", {
          type: "checkbox",
          "onUpdate:modelValue": _cache[3] || (_cache[3] = $event => (_ctx.showFormattedLogPush = $event))
        }, null, 512 /* NEED_PATCH */), [
          [_vModelCheckbox, _ctx.showFormattedLogPush]
        ]),
        _createTextVNode(" show formatted data ")
      ])
    ]),
    _createVNode("ul", null, [
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.logsPush, (log, index) => {
        return (_openBlock(), _createBlock("li", {
          class: "hide-button-container li-result-item",
          key: index
        }, [
          _createVNode("span", { class: "label label-primary" }, [
            _createVNode(_component_relative_time, {
              time: log.timeValue,
              locale: _ctx.locale
            }, null, 8 /* PROPS */, ["time", "locale"])
          ]),
          _createVNode("span", { class: "label label-default" }, _toDisplayString(log.hostname), 1 /* TEXT */),
          _createVNode("span", { class: "label label-default" }, _toDisplayString(log.filepath), 1 /* TEXT */),
          (log.content && _ctx.showRawLogPush)
            ? (_openBlock(), _createBlock("pre", { key: 0 }, _toDisplayString(log.content), 1 /* TEXT */))
            : _createCommentVNode("v-if", true),
          (log.formattedContent && _ctx.showFormattedLogPush && log.visible)
            ? (_openBlock(), _createBlock("pre", {
                key: 1,
                id: _ctx.logPushId(index)
              }, _toDisplayString(log.formattedContent), 9 /* TEXT, PROPS */, ["id"]))
            : _createCommentVNode("v-if", true),
          (log.formattedContent && _ctx.showFormattedLogPush)
            ? (_openBlock(), _createBlock("button", {
                key: 2,
                class: "btn btn-default btn-sm",
                style: _ctx.visibilityButtonStyle(log),
                onClick: $event => (_ctx.toggleVisibility(log))
              }, _toDisplayString(log.visible ? "hide formatted" : "show formatted"), 13 /* TEXT, STYLE, PROPS */, ["onClick"]))
            : _createCommentVNode("v-if", true)
        ]))
      }), 128 /* KEYED_FRAGMENT */))
    ])
  ]))
}
export function realtimeSamplesTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { class: "panel" }, [
    _createVNode("ul", { class: "menu" }, [
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.chartConfigs, (config, index) => {
        return (_openBlock(), _createBlock("li", {
          key: config.name
        }, [
          _createVNode("a", {
            href: "javascript:void(0)",
            onClick: $event => (_ctx.scrollBy(config.name))
          }, _toDisplayString(config.description), 9 /* TEXT, PROPS */, ["onClick"])
        ]))
      }), 128 /* KEYED_FRAGMENT */))
    ]),
    (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.chartConfigs, (config, index) => {
      return (_openBlock(), _createBlock("div", {
        key: config.name
      }, [
        _createVNode("h4", { style: {"padding-top":"10px"} }, _toDisplayString(config.description) + " " + _toDisplayString(config.unit !== undefined ? ("(" + config.unit + ")") : "") + " " + _toDisplayString(config.sum !== undefined ? (" " + config.sum) : ""), 1 /* TEXT */),
        _createVNode("canvas", {
          id: 'current-' + config.name,
          class: "graph",
          width: _ctx.chartWidth,
          height: "300"
        }, null, 8 /* PROPS */, ["id", "width"])
      ]))
    }), 128 /* KEYED_FRAGMENT */))
  ]))
}
export const requestProtocolJson = {
    "$ref": "#/definitions/RequestProtocol",
    "definitions": {
        "RequestProtocol": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "kind": {
                    "type": "string",
                    "enum": [
                        "search logs",
                        "search samples",
                        "resave failed logs"
                    ]
                },
                "searchLogs": {
                    "$ref": "#/definitions/SearchLogs"
                },
                "searchSamples": {
                    "$ref": "#/definitions/SearchSamples"
                }
            },
            "required": [
                "requestId",
                "kind"
            ],
            "additionalProperties": false,
            "maxProperties": 3
        },
        "SearchLogs": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "from": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "size": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                }
            },
            "required": [
                "content",
                "time",
                "hostname",
                "from",
                "size"
            ],
            "additionalProperties": false
        },
        "SearchSamples": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            },
            "required": [
                "from",
                "to"
            ],
            "additionalProperties": false
        }
    }
}
export const responseProtocolJson = {
    "$ref": "#/definitions/ResponseProtocol",
    "definitions": {
        "ResponseProtocol": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "enum": [
                        "flows",
                        "history samples",
                        "search logs result",
                        "search samples result",
                        "resave failed logs result"
                    ]
                },
                "flows": {
                    "$ref": "#/definitions/Flows"
                },
                "historySamples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleFrame"
                    }
                },
                "searchLogsResult": {
                    "$ref": "#/definitions/SearchLogsResult"
                },
                "searchSamplesResult": {
                    "$ref": "#/definitions/SearchSamplesResult"
                },
                "resaveFailedLogsResult": {
                    "$ref": "#/definitions/ResaveFailedLogsResult"
                }
            },
            "required": [
                "kind"
            ],
            "additionalProperties": false,
            "maxProperties": 2
        },
        "Flows": {
            "type": "object",
            "properties": {
                "serverTime": {
                    "type": "string"
                },
                "flows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Flow"
                    }
                }
            },
            "required": [
                "serverTime",
                "flows"
            ],
            "additionalProperties": false
        },
        "Flow": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string",
                    "enum": [
                        "log",
                        "sample"
                    ]
                },
                "log": {
                    "$ref": "#/definitions/Log"
                },
                "sample": {
                    "$ref": "#/definitions/Sample"
                }
            },
            "required": [
                "kind"
            ],
            "additionalProperties": false,
            "minProperties": 2,
            "maxProperties": 2
        },
        "Log": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "filepath": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                }
            },
            "required": [
                "time",
                "content",
                "filepath",
                "hostname"
            ],
            "additionalProperties": false
        },
        "Sample": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4294967295
                    }
                }
            },
            "required": [
                "hostname",
                "values"
            ],
            "additionalProperties": false
        },
        "SampleFrame": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "samples": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Sample"
                    }
                }
            },
            "required": [
                "time"
            ],
            "additionalProperties": false
        },
        "SearchLogsResult": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "kind": {
                    "type": "string",
                    "enum": [
                        "success",
                        "fail"
                    ]
                },
                "total": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Log"
                    }
                },
                "error": {
                    "type": "string"
                }
            },
            "required": [
                "requestId",
                "kind"
            ],
            "additionalProperties": false,
            "minProperties": 3,
            "maxProperties": 4
        },
        "SearchSamplesResult": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "kind": {
                    "type": "string",
                    "enum": [
                        "success",
                        "fail"
                    ]
                },
                "searchSampleResult": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SampleFrame"
                    }
                },
                "error": {
                    "type": "string"
                }
            },
            "required": [
                "requestId",
                "kind"
            ],
            "additionalProperties": false,
            "maxProperties": 3
        },
        "ResaveFailedLogsResult": {
            "type": "object",
            "properties": {
                "requestId": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "kind": {
                    "type": "string",
                    "enum": [
                        "success",
                        "fail"
                    ]
                },
                "savedCount": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "totalCount": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 4294967295
                },
                "error": {
                    "type": "string"
                }
            },
            "required": [
                "requestId",
                "kind"
            ],
            "additionalProperties": false,
            "minProperties": 3,
            "maxProperties": 4
        }
    }
}
export function searchLogsTemplateHtml(_ctx, _cache) {
  const _component_relative_time = _resolveComponent("relative-time")

  return (_openBlock(), _createBlock("div", { class: "panel" }, [
    _createVNode("div", { class: "flex-center" }, [
      _withDirectives(_createVNode("input", {
        class: "form-control",
        "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => (_ctx.content = $event)),
        title: "content",
        onKeyup: _cache[2] || (_cache[2] = _withKeys($event => (_ctx.search(true)), ["enter"]))
      }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [
        [_vModelText, _ctx.content]
      ]),
      _withDirectives(_createVNode("input", {
        class: "form-control",
        "onUpdate:modelValue": _cache[3] || (_cache[3] = $event => (_ctx.time = $event)),
        title: "time",
        onKeyup: _cache[4] || (_cache[4] = _withKeys($event => (_ctx.search(true)), ["enter"]))
      }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [
        [_vModelText, _ctx.time]
      ]),
      _withDirectives(_createVNode("input", {
        class: "form-control",
        "onUpdate:modelValue": _cache[5] || (_cache[5] = $event => (_ctx.hostname = $event)),
        titme: "hostname",
        onKeyup: _cache[6] || (_cache[6] = _withKeys($event => (_ctx.search(true)), ["enter"]))
      }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [
        [_vModelText, _ctx.hostname]
      ]),
      _createVNode("button", {
        class: "btn btn-primary btn-lg primary-button",
        onClick: _cache[7] || (_cache[7] = $event => (_ctx.search(true))),
        disabled: !_ctx.content
      }, "search", 8 /* PROPS */, ["disabled"])
    ]),
    _createVNode("div", null, [
      _createVNode("button", {
        class: "btn btn-default btn-sm",
        onClick: _cache[8] || (_cache[8] = $event => (_ctx.clearLogsSearchResult())),
        disabled: _ctx.logsSearchResult.length === 0
      }, "clear", 8 /* PROPS */, ["disabled"]),
      _createVNode("label", null, [
        _withDirectives(_createVNode("input", {
          type: "checkbox",
          "onUpdate:modelValue": _cache[9] || (_cache[9] = $event => (_ctx.showRawLogResult = $event))
        }, null, 512 /* NEED_PATCH */), [
          [_vModelCheckbox, _ctx.showRawLogResult]
        ]),
        _createTextVNode(" show raw data ")
      ]),
      _createVNode("label", null, [
        _withDirectives(_createVNode("input", {
          type: "checkbox",
          "onUpdate:modelValue": _cache[10] || (_cache[10] = $event => (_ctx.showFormattedLogResult = $event))
        }, null, 512 /* NEED_PATCH */), [
          [_vModelCheckbox, _ctx.showFormattedLogResult]
        ]),
        _createTextVNode(" show formatted data ")
      ])
    ]),
    _createVNode("ul", null, [
      (_ctx.logsSearchResult.length === 0)
        ? (_openBlock(), _createBlock("li", {
            key: 0,
            class: "li-result-item"
          }, [
            _createVNode("pre", { class: "pre" }, "not started or nothing found.")
          ]))
        : _createCommentVNode("v-if", true),
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.logsSearchResult, (log, index) => {
        return (_openBlock(), _createBlock("li", {
          class: "hide-button-container li-result-item",
          key: index
        }, [
          _createVNode("span", { class: "label label-primary" }, [
            _createVNode(_component_relative_time, {
              time: log.timeValue,
              locale: _ctx.locale
            }, null, 8 /* PROPS */, ["time", "locale"])
          ]),
          _createVNode("span", { class: "label label-default" }, _toDisplayString(log.hostname), 1 /* TEXT */),
          _createVNode("span", { class: "label label-default" }, _toDisplayString(log.filepath), 1 /* TEXT */),
          (log.content && _ctx.showRawLogResult)
            ? (_openBlock(), _createBlock("pre", {
                key: 0,
                class: "pre",
                innerHTML: log.content
              }, null, 8 /* PROPS */, ["innerHTML"]))
            : _createCommentVNode("v-if", true),
          (log.formattedContent && _ctx.showFormattedLogResult && log.visible)
            ? (_openBlock(), _createBlock("pre", {
                key: 1,
                class: "pre",
                id: _ctx.logSearchResultId(index),
                innerHTML: log.formattedContent
              }, null, 8 /* PROPS */, ["id", "innerHTML"]))
            : _createCommentVNode("v-if", true),
          (log.formattedContent && _ctx.showFormattedLogResult)
            ? (_openBlock(), _createBlock("button", {
                key: 2,
                class: "btn btn-default btn-sm",
                style: _ctx.visibilityButtonStyle(log),
                onClick: $event => (_ctx.toggleVisibility(log))
              }, _toDisplayString(log.visible ? "hide formatted" : "show formatted"), 13 /* TEXT, STYLE, PROPS */, ["onClick"]))
            : _createCommentVNode("v-if", true)
        ]))
      }), 128 /* KEYED_FRAGMENT */))
    ]),
    (_ctx.logsSearchResult.length > 0 && _ctx.leftCount > 0)
      ? (_openBlock(), _createBlock("div", { key: 0 }, [
          _createVNode("button", {
            class: "btn btn-primary",
            onClick: _cache[11] || (_cache[11] = $event => (_ctx.search(false)))
          }, [
            _createTextVNode(" continue "),
            _createVNode("span", { class: "badge" }, _toDisplayString(_ctx.leftCount), 1 /* TEXT */)
          ])
        ]))
      : _createCommentVNode("v-if", true)
  ]))
}
export function searchSamplesTemplateHtml(_ctx, _cache) {
  return (_openBlock(), _createBlock("div", { class: "panel" }, [
    _createVNode("div", { class: "flex-center" }, [
      _withDirectives(_createVNode("input", {
        class: "form-control",
        style: {"width":"30%"},
        "onUpdate:modelValue": _cache[1] || (_cache[1] = $event => (_ctx.searchFrom = $event))
      }, null, 512 /* NEED_PATCH */), [
        [_vModelText, _ctx.searchFrom]
      ]),
      _withDirectives(_createVNode("input", {
        class: "form-control",
        style: {"width":"30%"},
        "onUpdate:modelValue": _cache[2] || (_cache[2] = $event => (_ctx.searchTo = $event))
      }, null, 512 /* NEED_PATCH */), [
        [_vModelText, _ctx.searchTo]
      ]),
      _createVNode("button", {
        class: "btn btn-primary btn-lg primary-button",
        onClick: _cache[3] || (_cache[3] = $event => (_ctx.searchSamples())),
        disabled: !_ctx.searchFrom || !_ctx.searchTo
      }, "search", 8 /* PROPS */, ["disabled"])
    ]),
    _createVNode("ul", { class: "menu list-unstyled" }, [
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.chartConfigs, (config, index) => {
        return (_openBlock(), _createBlock("li", {
          key: config.name
        }, [
          _createVNode("a", {
            href: '#' + config.name
          }, _toDisplayString(config.description), 9 /* TEXT, PROPS */, ["href"])
        ]))
      }), 128 /* KEYED_FRAGMENT */))
    ]),
    (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.chartConfigs, (config, index) => {
      return (_openBlock(), _createBlock("div", {
        key: config.name
      }, [
        _createVNode("h4", {
          id: config.name,
          style: {"padding-top":"10px"}
        }, _toDisplayString(config.description) + " " + _toDisplayString(config.unit !== undefined ? ("(" + config.unit + ")") : ""), 9 /* TEXT, PROPS */, ["id"]),
        _createVNode("canvas", {
          id: 'history-' + config.name,
          class: "graph",
          width: _ctx.chartWidth,
          height: "300"
        }, null, 8 /* PROPS */, ["id", "width"])
      ]))
    }), 128 /* KEYED_FRAGMENT */))
  ]))
}
/* eslint-enable */
// tslint:enable
